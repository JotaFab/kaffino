// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (id, code, images, title, description, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateProductParams struct {
	ID          string
	Code        string
	Images      sql.NullString
	Title       string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Code,
		arg.Images,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createProductTag = `-- name: CreateProductTag :exec
INSERT INTO product_tags (product_id, tag_id) VALUES (?, ?)
`

type CreateProductTagParams struct {
	ProductID string
	TagID     string
}

func (q *Queries) CreateProductTag(ctx context.Context, arg CreateProductTagParams) error {
	_, err := q.db.ExecContext(ctx, createProductTag, arg.ProductID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (id, name) VALUES (?, ?)
`

type CreateTagParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.ExecContext(ctx, createTag, arg.ID, arg.Name)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, code, images, title, description, created_at, updated_at FROM products WHERE id = ?
`

func (q *Queries) GetProduct(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Images,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductTags = `-- name: GetProductTags :many
SELECT t.name
FROM tags t
JOIN product_tags pt ON t.id = pt.tag_id
WHERE pt.product_id = ?
`

func (q *Queries) GetProductTags(ctx context.Context, productID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getProductTags, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTag = `-- name: GetTag :one
SELECT id, name, created_at, updated_at FROM tags WHERE id = ?
`

func (q *Queries) GetTag(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, created_at, updated_at FROM tags WHERE name = ?
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, code, images, title, description, created_at, updated_at FROM products LIMIT ?
`

func (q *Queries) ListProducts(ctx context.Context, limit int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Images,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products SET code = ?, images = ?, title = ?, description = ?, updated_at = ? WHERE id = ?
`

type UpdateProductParams struct {
	Code        string
	Images      sql.NullString
	Title       string
	Description sql.NullString
	UpdatedAt   sql.NullTime
	ID          string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Code,
		arg.Images,
		arg.Title,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
